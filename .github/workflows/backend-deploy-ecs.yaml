name: Deploy Backend to ECS

on:
  workflow_run:
    workflows: ["Run All Tests"]
    types:
      - completed

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: habit-backend
  ECS_SERVICE: habit-hub-task-2-service-back
  ECS_CLUSTER: habit-hub-cluster-2
  CONTAINER_NAME: habit-hub 


jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a 

    - name: Build and Push Docker image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: habit-backend
        IMAGE_TAG: latest
      run: |
        echo "Registry: $ECR_REGISTRY"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./back-habit-hub
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

    - name: Prepare task definition with secrets
      run: |
        cp back-habit-hub/deploy/habit-backend-task-def.json task-def-updated.json
        sed -i "s|\${POSTGRES_USER}|${{ secrets.POSTGRES_USER }}|g" task-def-updated.json
        sed -i "s|\${POSTGRES_PASSWORD}|${{ secrets.POSTGRES_PASSWORD }}|g" task-def-updated.json
        sed -i "s|\${POSTGRES_PORT}|${{ secrets.POSTGRES_PORT }}|g" task-def-updated.json
        sed -i "s|\${POSTGRES_NAME}|${{ secrets.POSTGRES_NAME }}|g" task-def-updated.json
        sed -i "s|\${POSTGRES_HOST}|${{ secrets.POSTGRES_HOST }}|g" task-def-updated.json  
        sed -i "s|\${PORT}|${{ secrets.PORT }}|g" task-def-updated.json
        sed -i "s|\${SECRET}|${{ secrets.SECRET }}|g" task-def-updated.json
        sed -i "s|\${EMAIL_USER}|${{ secrets.EMAIL_USER }}|g" task-def-updated.json
        sed -i "s|\${EMAIL_PASS}|${{ secrets.EMAIL_PASS }}|g" task-def-updated.json
        sed -i "s|\${SALT}|${{ secrets.SALT }}|g" task-def-updated.json
        sed -i "s|\${LOCAL_HOST}|${{ secrets.LOCAL_HOST }}|g" task-def-updated.json
        sed -i "s|\${AWS_ACCESS_KEY_ID}|${{ secrets.AWS_ACCESS_KEY_ID }}|g" task-def-updated.json
        sed -i "s|\${AWS_SECRET_ACCESS_KEY}|${{ secrets.AWS_SECRET_ACCESS_KEY }}|g" task-def-updated.json
        sed -i "s|\${AWS_S3_BUCKET_NAME}|${{ secrets.AWS_S3_BUCKET_NAME }}|g" task-def-updated.json
        sed -i "s|\${AWS_REGION}|${{ secrets.AWS_REGION }}|g" task-def-updated.json  

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
      with:
        task-definition: ./task-def-updated.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
    
    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: habit-hub-task-2-service-back
        cluster: habit-hub-cluster-2
        wait-for-service-stability: true

